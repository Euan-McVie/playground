@page "/cities"
@using HybridCache.ApiModels
@using HybridCache.Web.Clients
@rendermode InteractiveServer

@inject PersistentComponentState ApplicationState
@inject CitiesApiClient CitiesApi

<PageTitle>Cities</PageTitle>

<h1>Cities</h1>

<label><em>
    Clear cache on update:
    <input type="checkbox" @bind="CitiesApi.ClearCache" />
</em></label>

<QuickGrid Items="_cities?.AsQueryable()">
    <PropertyColumn Sortable="true" Property="@(city => city.Id)" />
    <TemplateColumn Sortable="true" Title="Name">
        <div>
            <label>
                <input type="text" @bind="context.Name" @bind:after="() => updateCityAsync(context)" />
            </label>
        </div>
    </TemplateColumn>
</QuickGrid>

@code {
    private PersistingComponentStateSubscription _subscription;
    private City[]? _cities = null;

    protected override async Task OnInitializedAsync()
    {
               _subscription = ApplicationState.RegisterOnPersisting(PersistState);

        var foundState = ApplicationState.TryTakeFromJson<State>("state", out var state);
        if (foundState && state is not null)
        {
            _cities = state.Cities;
        }
        else
        {
            _cities = await CitiesApi.GetCitiesAsync();
        }
    }

    public void Dispose()
    {
        _subscription.Dispose();
    }

    private async Task updateCityAsync(City city)
    {
        await CitiesApi.UpdateCityAsync(city);
    }

    private Task PersistState()
    {
        ApplicationState.PersistAsJson("state", new State(_cities));
        return Task.CompletedTask;
    }

    private sealed record State(City[]? Cities);
}
