@page "/weather"
@rendermode InteractiveServer

@using HybridCache.Web.Clients
@using HybridCache.Web.Models
@using System.Threading

@implements IDisposable
@attribute [StreamRendering(true)]

@inject PersistentComponentState ApplicationState
@inject WeatherApiClient WeatherApi

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

<label><em>
    Enable Cache:
    <input type="checkbox" @bind="WeatherApi.IsCacheEnabled" />
</em></label>

@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p><em>
        Last Updated: @_lastUpdated.ToString("u")
        <br />
        Time Since Last Updated: @_timeSinceLastUpdated.ToString("hh\\:mm\\:ss")
    </em></p>
    <button class="btn btn-primary" disabled=@_isRefreshing @onclick=RefreshForecastsAsync>Refresh</button>

    <table class="table">
        <thead>
            <tr>
                <th>City</th>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Fahrenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.CityName</td>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PersistingComponentStateSubscription _subscription;
    private Timer? _refreshTimeSinceLastUpdatedTimer;
    private CityWeatherForecast[]? _forecasts;
    private DateTimeOffset _lastUpdated;
    private TimeSpan _timeSinceLastUpdated;
    private bool _isRefreshing;

    public void Dispose()
    {
        _refreshTimeSinceLastUpdatedTimer?.Dispose();
        _refreshTimeSinceLastUpdatedTimer = null;

        _subscription.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        _subscription = ApplicationState.RegisterOnPersisting(PersistState);

        var foundState = ApplicationState.TryTakeFromJson<State>("state", out var state);
        if (foundState && state is not null)
        {
            _forecasts = state.Forecasts;
            _lastUpdated = state.LastUpdated;
        }
        else
        {
            await RefreshForecastsAsync();
        }

        UpdateTimeSinceLastUpdated();

        _refreshTimeSinceLastUpdatedTimer = new Timer(_ => RefreshTimeSinceLastUpdated(), null, 250, 250);
    }

    private async Task RefreshForecastsAsync()
    {
        try
        {
            _isRefreshing = true;
            await Task.Yield(); // Yield to allow UI to update
            (_forecasts, _lastUpdated) = await WeatherApi.GetWeatherForecastsAsync();
        }
        finally
        {
            _isRefreshing = false;
        }
    }

    private void RefreshTimeSinceLastUpdated()
    {
        UpdateTimeSinceLastUpdated();
        _ = InvokeAsync(StateHasChanged);
    }

    private void UpdateTimeSinceLastUpdated()
      => _timeSinceLastUpdated = DateTimeOffset.Now - _lastUpdated;

    private Task PersistState()
    {
        ApplicationState.PersistAsJson("state", new State(_forecasts, _lastUpdated));
        return Task.CompletedTask;
    }

    private sealed record State(CityWeatherForecast[]? Forecasts, DateTimeOffset LastUpdated);
}

