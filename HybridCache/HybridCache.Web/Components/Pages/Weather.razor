@page "/weather"
@rendermode InteractiveServer

@using HybridCache.Web.Clients
@using HybridCache.Web.Models
@using System.Threading
@using System.Diagnostics

@implements IDisposable
@attribute [StreamRendering(true)]

@inject PersistentComponentState ApplicationState
@inject WeatherApiClient WeatherApi

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<label><em>
    Enable Client Cache:
    <input type="checkbox" disabled=@_isRefreshing @bind="WeatherApi.IsClientCacheEnabled" />
</em></label>
<label><em>
    Populate Client Cache On Miss:
    <input type="checkbox" disabled=@(!WeatherApi.IsClientCacheEnabled || _isRefreshing) @bind="WeatherApi.PopulateCacheOnMiss" />
</em></label>
<br/>
<label><em>
    Enable Server Cache:
    <input type="checkbox" disabled=@_isRefreshing @bind="WeatherApi.IsServerCacheEnabled" />
</em></label>

@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p><em>
        Refresh Time: @_timeToRefresh.ToString("mm\\:ss\\.fff")
        <br />
        Time Since Updated: @_timeSinceUpdated.ToString("mm\\:ss")
        <br />
        Time Since City Cached (Local): @_timeSinceCityLocalCached.ToString("mm\\:ss") (10s expiry)
        <br />
        Time Since City Cached (Distributed): @_timeSinceCityDistributedCached.ToString("mm\\:ss") (30s expiry)
    </em></p>
    <button class="btn btn-primary" disabled=@_isRefreshing @onclick=RefreshForecastsAsync>Refresh</button>

    <table class="table">
        <thead>
            <tr>
                <th>City</th>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Fahrenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.City.Name</td>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PersistingComponentStateSubscription _subscription;
    private Timer? _refreshTimeSinceLastUpdatedTimer;
    private IReadOnlyList<CityWeatherForecast>? _forecasts;
    private TimeSpan _timeToRefresh;
    private DateTimeOffset _updatedAt;
    private DateTimeOffset _cityLocalCachedAt;
    private DateTimeOffset _cityDistributedCachedAt;
    private TimeSpan _timeSinceUpdated;
    private TimeSpan _timeSinceCityLocalCached;
    private TimeSpan _timeSinceCityDistributedCached;
    private bool _isRefreshing;

    public void Dispose()
    {
        _refreshTimeSinceLastUpdatedTimer?.Dispose();
        _refreshTimeSinceLastUpdatedTimer = null;

        _subscription.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        _subscription = ApplicationState.RegisterOnPersisting(PersistState);

        var foundState = ApplicationState.TryTakeFromJson<State>("state", out var state);
        if (foundState && state is not null)
        {
            _forecasts = state.Forecasts;
            _timeToRefresh = state.TimeToRefresh;
            _updatedAt = state.UpdatedAt;
            _cityLocalCachedAt = state.CityLocalCachedAt;
            _cityDistributedCachedAt = state.CityDistributedCachedAt;
        }
        else
        {
            await RefreshForecastsAsync();
        }

        UpdateTimeSinceLastUpdated();

        _refreshTimeSinceLastUpdatedTimer = new Timer(_ => RefreshTimeSinceLastUpdated(), null, 1000, 1000);
    }

    private async Task RefreshForecastsAsync()
    {
        try
        {
            _isRefreshing = true;
            await Task.Yield(); // Yield to allow UI to update
            var stopWatch = Stopwatch.StartNew();
            var response = await WeatherApi.GetWeatherForecastsAsync();
            _timeToRefresh = stopWatch.Elapsed;
            _updatedAt = DateTimeOffset.Now;
            _forecasts = response.Forecasts;
            _cityLocalCachedAt = response.CityLocalCachedAt;
            _cityDistributedCachedAt = response.CityDistributedCachedAt;
        }
        finally
        {
            _isRefreshing = false;
        }
    }

    private void RefreshTimeSinceLastUpdated()
    {
        UpdateTimeSinceLastUpdated();
        _ = InvokeAsync(StateHasChanged);
    }

    private void UpdateTimeSinceLastUpdated()
    {
        var now = DateTimeOffset.Now;
        _timeSinceUpdated = now - _updatedAt;
        _timeSinceCityLocalCached = now - _cityLocalCachedAt;
        _timeSinceCityDistributedCached = now - _cityDistributedCachedAt;
    }

    private Task PersistState()
    {
        ApplicationState.PersistAsJson(
            "state",
            new State(
                _forecasts,
                _timeToRefresh,
                _updatedAt,
                _cityLocalCachedAt,
                _cityDistributedCachedAt));
        return Task.CompletedTask;
    }

    private sealed record State(
        IReadOnlyList<CityWeatherForecast>? Forecasts,
        TimeSpan TimeToRefresh,
        DateTimeOffset UpdatedAt,
        DateTimeOffset CityLocalCachedAt,
        DateTimeOffset CityDistributedCachedAt);
}

